[{"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\index.js":"1","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\App.js":"2","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\reportWebVitals.js":"3","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\Header.js":"4","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\PhotoEffects.js":"5","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\PhotoEffect.js":"6","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\PhotoEffect2.js":"7","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\FaceFilter.js":"8","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\StyleTransfer.js":"9","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\OldNew.js":"10","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\da_axios.js":"11","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\requests.js":"12","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\toon_axios.js":"13","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\dzook_axios.js":"14","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\key_config.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":837,"mtime":1609354638973,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":288,"mtime":1609263043063,"results":"20","hashOfConfig":"17"},{"size":1190,"mtime":1609321448529,"results":"21","hashOfConfig":"17"},{"size":937,"mtime":1609321895744,"results":"22","hashOfConfig":"17"},{"size":835,"mtime":1609321685596,"results":"23","hashOfConfig":"17"},{"size":12844,"mtime":1610010049364,"results":"24","hashOfConfig":"17"},{"size":7877,"mtime":1609707981304,"results":"25","hashOfConfig":"17"},{"size":5635,"mtime":1609708280828,"results":"26","hashOfConfig":"17"},{"size":181,"mtime":1609434781328,"results":"27","hashOfConfig":"17"},{"size":732,"mtime":1610009593209,"results":"28","hashOfConfig":"17"},{"size":188,"mtime":1609435403379,"results":"29","hashOfConfig":"17"},{"size":335,"mtime":1609441330318,"results":"30","hashOfConfig":"17"},{"size":317,"mtime":1609605088013,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"15g5efd",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\index.js",[],["65","66"],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\App.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\reportWebVitals.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\Header.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\PhotoEffects.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\PhotoEffect.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\PhotoEffect2.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\FaceFilter.js",["67","68","69","70","71"],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\StyleTransfer.js",["72","73","74","75"],"import { Button, IconButton } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport './StyleTransfer.css';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from '../da_axios';\r\nimport {requests,  DA_API_KEY} from '../requests';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';   \r\nimport LoadingOverlay from 'react-loading-overlay';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\n\r\n\r\nfunction StyleTransfer() {\r\n\r\n    const[content, setContent] = useState(null);\r\n    const[style, setStyle] = useState(null);\r\n    const[output, setOutput] = useState(null);\r\n\r\n    const[outputOverlay, setOutputOverlay] = useState(false);\r\n    const[disable, setDisable]= useState(true);\r\n\r\n\r\n    const data = new FormData();\r\n\r\n    async function fetchData(){\r\n        setOutput(null);\r\n        const response = await axios.post(requests.fetchStyle,\r\n            data,\r\n            { headers:{\r\n                \"api-key\": DA_API_KEY,\r\n                'Content-type': 'multipart/form-data'}\r\n            } \r\n        \r\n            );\r\n        // console.log(response);\r\n        setOutput(response.data.output_url)\r\n        // console.log(photo);\r\n        return response;\r\n    }\r\n\r\n    function downloadImage(src) {\r\n        const img = new Image();\r\n        img.crossOrigin = \"anonymous\";\r\n        img.src = src;\r\n        img.onload = () => {\r\n            // create Canvas\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            ctx.drawImage(img, 0, 0);\r\n            // create <a> tag\r\n            const a = document.createElement(\"a\");\r\n            a.download = \"download.jpg\";\r\n            a.href = canvas.toDataURL(\"image/png\");\r\n            a.click();\r\n        };\r\n    }\r\n\r\n    useEffect(() => {\r\n        data.append('content', content)\r\n        data.append('style', style)\r\n        if(output){\r\n            setOutputOverlay(false);\r\n        }\r\n        if(content&&style){\r\n            setDisable(false);\r\n        }\r\n\r\n        if(!content&&!style){\r\n            setDisable(true);\r\n        }\r\n    }, [data, content, style, output])\r\n\r\n    return (\r\n        <div className = 'styleTransfer'>\r\n\r\n            <div className = 'styleTransfer__content'>\r\n\r\n                <div className = 'styleTransfer__contentLeft'>\r\n                    <Link to = '/'>\r\n                        <h2>PixAI</h2>     \r\n                    </Link>\r\n\r\n                    <h3>Style Transfer</h3>\r\n\r\n                    <div className = 'styleTransfer__Input'>\r\n\r\n                        <div className = 'styleTransfer__InputContent'>\r\n\r\n                            {!content &&\r\n                                <h3>Content (Photo)</h3>\r\n                            }\r\n                            \r\n                            <input\r\n                                accept=\"image/*\"\r\n                                className='styleTransfer__InputContentInput'\r\n                                id=\"contained-button-file1\"\r\n                                multiple\r\n                                type=\"file\"\r\n                                onChange = {(e)  => setContent(e.target.files[0])}\r\n                            />\r\n\r\n                            {content && <img src = {content && URL.createObjectURL(content)}/>}       \r\n\r\n                            {!content &&\r\n                                <label htmlFor=\"contained-button-file1\">\r\n                                    <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                        Upload\r\n                                    </Button>\r\n                                </label>\r\n                            }\r\n                            \r\n\r\n                        </div>\r\n\r\n\r\n\r\n                        <div className = 'styleTransfer__InputStyle'>\r\n                            \r\n                            {!style && \r\n                                 <h3>Style (Art)</h3>                           \r\n                            }\r\n\r\n                            <input\r\n                                accept=\"image/*\"\r\n                                className='styleTransfer__InputStyleInput'\r\n                                id=\"contained-button-file2\"\r\n                                multiple\r\n                                type=\"file\"\r\n                                onChange = {(e)  => setStyle(e.target.files[0])}\r\n                            />\r\n\r\n                            {style && <img src = {style && URL.createObjectURL(style)}/>} \r\n\r\n                            {!style &&\r\n                                <label htmlFor=\"contained-button-file2\">\r\n                                    <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n                                        Upload\r\n                                    </Button>\r\n                                </label>\r\n                            }\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <IconButton onClick ={()=>{\r\n                            downloadImage(output)\r\n                        }}>\r\n                            {output && <GetAppIcon/>}\r\n                        </IconButton>\r\n                    \r\n                    <div className = 'styleTransfer__contentLeftRun'>\r\n                        <input \r\n                            accept=\"image/*\"\r\n                            className='oldNew__InputStyleInput'\r\n                            id=\"icon-button-file1\"\r\n                            type=\"file\" \r\n                            onChange = {(e) => setContent(e.target.files[0])}\r\n                        />\r\n\r\n                        \r\n                        {content &&\r\n                            <label htmlFor=\"icon-button-file1\">\r\n                                <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                                     <PhotoCamera/>\r\n                                </IconButton>\r\n                            </label> \r\n                        }\r\n\r\n                        <Button\r\n                            disabled = {disable}\r\n\r\n                            onClick = {()=>{\r\n                                fetchData()\r\n                                setOutputOverlay(true)\r\n                            }\r\n                                }\r\n                            variant = 'outlined'>\r\n                            Merge\r\n                        </Button> \r\n\r\n                        <input \r\n                            accept=\"image/*\"\r\n                            className='oldNew__InputStyleInput'\r\n                            id=\"icon-button-file2\"\r\n                            type=\"file\" \r\n                            onChange = {(e) => setStyle(e.target.files[0])}\r\n                        />\r\n                           \r\n                        {style &&\r\n                            <label htmlFor=\"icon-button-file2\">\r\n                                <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                                    <PhotoCamera/>\r\n                                </IconButton>\r\n                            </label> \r\n                        }\r\n\r\n                        \r\n                    </div>\r\n\r\n                    \r\n\r\n                </div>\r\n                <LoadingOverlay\r\n                    active = {outputOverlay}\r\n                    spinner\r\n                    text = 'Loading creation...'\r\n                >\r\n                <div className = 'styleTransfer__Output'>\r\n                    {output && <img src = {output}/>}   \r\n                </div>\r\n                </LoadingOverlay>\r\n                \r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StyleTransfer\r\n","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\components\\OldNew.js",["76","77","78","79"],"import React, { useEffect, useState } from 'react';\r\nimport './OldNew.css';\r\nimport { Button, IconButton, useEventCallback} from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';   \r\nimport axios from '../da_axios';\r\nimport {requests,  DA_API_KEY} from '../requests';\r\n// import DA_API_KEY from '../requests';\r\nimport LoadingOverlay from \"react-loading-overlay\";\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\n\r\nfunction OldNew() {\r\n\r\n    const[photo, setPhoto] = useState(null);\r\n    const[output, setOutput] = useState(null);\r\n\r\n    const[outputOverlay, setOutputOverlay] = useState(false);\r\n    const[disable, setDisable]= useState(true);\r\n\r\n\r\n    const data =new FormData();\r\n    \r\n    async function fetchData(){\r\n        setOutput(null);\r\n        const response = await axios.post(requests.fetchColor,\r\n            data,\r\n            { headers:{\r\n                \"api-key\": DA_API_KEY,\r\n                'Content-type': 'multipart/form-data'}\r\n            } \r\n            );\r\n        // console.log(response);\r\n        setOutput(response.data.output_url)\r\n        // console.log(photo);\r\n        return response;\r\n    }\r\n\r\n    function downloadImage(src) {\r\n        const img = new Image();\r\n        img.crossOrigin = \"anonymous\";\r\n        img.src = src;\r\n        img.onload = () => {\r\n            // create Canvas\r\n            const canvas = document.createElement(\"canvas\");\r\n            const ctx = canvas.getContext(\"2d\");\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            ctx.drawImage(img, 0, 0);\r\n            // create <a> tag\r\n            const a = document.createElement(\"a\");\r\n            a.download = \"download.jpg\";\r\n            a.href = canvas.toDataURL(\"image/png\");\r\n            a.click();\r\n        };\r\n    }\r\n\r\n    useEffect(()=>{\r\n        data.append('image', photo)\r\n        if(output){\r\n            setOutputOverlay(false);\r\n        }\r\n        if(photo){\r\n            setDisable(false);\r\n        }\r\n\r\n        if(!photo){\r\n            setDisable(true);\r\n        }\r\n    },[data, photo, output])\r\n\r\n\r\n    return (\r\n        <div className = 'oldNew'>\r\n            <div className = 'oldNew__content'>\r\n\r\n                <div className = 'oldNew__contentLeft'>\r\n                    <Link to = '/'>\r\n                        <h2>PixAI</h2>     \r\n                    </Link>\r\n\r\n                    <h3>Old to New</h3>\r\n\r\n                    <div className = 'oldNew__Input'>\r\n\r\n                        <div className = 'oldNew__InputStyle'>\r\n\r\n                            {!photo &&\r\n                                <h3>Old Photo</h3>\r\n                            } \r\n    \r\n                            \r\n                            <input \r\n                                accept=\"image/*\"\r\n                                className='oldNew__InputStyleInput'\r\n                                id=\"icon-button-file\"\r\n                                type=\"file\" \r\n                                onChange = {(e) => setPhoto(e.target.files[0])}\r\n                                />\r\n\r\n                                {photo && <img src = {photo && URL.createObjectURL(photo)}/>}\r\n\r\n\r\n                            {!photo &&\r\n                                <label htmlFor=\"icon-button-file\">\r\n                                    <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                                        <PhotoCamera/>\r\n                                    </IconButton>\r\n                                </label> \r\n                            }\r\n\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className = 'oldNew__run'>\r\n                        <input \r\n                            accept=\"image/*\"\r\n                            className='oldNew__InputStyleInput'\r\n                            id=\"icon-button-file\"\r\n                            type=\"file\" \r\n                            onChange = {(e) => setPhoto(e.target.files[0])}\r\n                        />\r\n                           \r\n                        {photo &&\r\n                            <label htmlFor=\"icon-button-file\">\r\n                                <IconButton color=\"primary\" aria-label=\"upload picture\" component=\"span\">\r\n                                    <PhotoCamera/>\r\n                                </IconButton>\r\n                            </label> \r\n                        }\r\n\r\n                        <Button\r\n                            disabled = {disable}\r\n\r\n                            onClick = {()=>{\r\n                                fetchData()\r\n                                setOutputOverlay(true)\r\n                            }\r\n                                \r\n                            }\r\n                            variant = 'outlined'>\r\n                            Revitalise\r\n                        </Button> \r\n                    </div>\r\n\r\n                    <IconButton onClick ={()=>{\r\n                            downloadImage(output)\r\n                        }}>\r\n                            {output && <GetAppIcon/>}\r\n                        </IconButton>\r\n\r\n                </div>\r\n                <LoadingOverlay\r\n                    active = {outputOverlay}\r\n                    spinner\r\n                    text = 'Loading creation...'\r\n                >\r\n                <div className = 'oldNew__Output'>\r\n                    {output && <img src = {output}/>}\r\n                </div>\r\n                </LoadingOverlay>\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OldNew\r\n","C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\da_axios.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\requests.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\toon_axios.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\dzook_axios.js",[],"C:\\Users\\Al-Amin\\Documents\\reactPrjs\\photo_digital_ocean\\src\\key_config.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":24,"column":11,"nodeType":"86","messageId":"87","endLine":24,"endColumn":24},{"ruleId":"84","severity":1,"message":"88","line":90,"column":20,"nodeType":"86","messageId":"87","endLine":90,"endColumn":37},{"ruleId":"89","severity":1,"message":"90","line":171,"column":26,"nodeType":"91","endLine":174,"endColumn":15},{"ruleId":"92","severity":1,"message":"93","line":221,"column":42,"nodeType":"94","endLine":221,"endColumn":91},{"ruleId":"92","severity":1,"message":"93","line":359,"column":33,"nodeType":"94","endLine":359,"endColumn":82},{"ruleId":"89","severity":1,"message":"95","line":23,"column":11,"nodeType":"96","endLine":23,"endColumn":32},{"ruleId":"92","severity":1,"message":"93","line":104,"column":41,"nodeType":"94","endLine":104,"endColumn":95},{"ruleId":"92","severity":1,"message":"93","line":134,"column":39,"nodeType":"94","endLine":134,"endColumn":89},{"ruleId":"92","severity":1,"message":"93","line":213,"column":32,"nodeType":"94","endLine":213,"endColumn":53},{"ruleId":"84","severity":1,"message":"97","line":3,"column":30,"nodeType":"86","messageId":"87","endLine":3,"endColumn":46},{"ruleId":"89","severity":1,"message":"98","line":21,"column":11,"nodeType":"96","endLine":21,"endColumn":31},{"ruleId":"92","severity":1,"message":"93","line":100,"column":43,"nodeType":"94","endLine":100,"endColumn":93},{"ruleId":"92","severity":1,"message":"93","line":160,"column":32,"nodeType":"94","endLine":160,"endColumn":53},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"no-unused-vars","'filterOptions' is assigned a value but never used.","Identifier","unusedVar","'fetchToonPlusData' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'dzookData' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","The 'data' object construction makes the dependencies of useEffect Hook (at line 73) change on every render. To fix this, wrap the initialization of 'data' in its own useMemo() Hook.","VariableDeclarator","'useEventCallback' is defined but never used.","The 'data' object construction makes the dependencies of useEffect Hook (at line 69) change on every render. To fix this, wrap the initialization of 'data' in its own useMemo() Hook.","no-global-assign","no-unsafe-negation"]